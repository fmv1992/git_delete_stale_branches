#! /usr/bin/env bash

# Halt on error.
set -euo pipefail

REFERENCE_DIR="${REFERENCE_DIR:-}"
source "${REFERENCE_DIR}/usr/local/lib/git_delete_stale_branches/git_delete_stale_branches"
source /usr/local/lib/shell_argument_parsing_file/shell_argument_parsing_file

REC_ENTRYPOINT=${REFERENCE_DIR}/usr/local/share/git_delete_stale_branches/recfiles/git_delete_stale_branches_entrypoint.rec

declare -A arguments

parse "${REC_ENTRYPOINT}" arguments "${*:-}"

# Ensure `--delete` is passed.
if [[ ${arguments[delete]:-SENTINEL} != 'true' ]]; then
    echo 'The `--delete` flag must be passed.' > /dev/stderr
    exit 1
fi

# declare -A empty_array
# empty_array[rest_n]=0
# empty_array[test]=true

# _print_array arguments

# Ensure no arguments are passed on the first version.
# _associative_arrays_are_equal empty_array arguments

# ✂ --------------------------------------------------
function validate_other_git_branches_deleted_file() {
    validated="$(grep -E '^[0-9]+,.*$' -- "${1}")"
    if diff <(printf "%s\n" "${validated}") "${1}"; then
        return 0
    else
        return 1
    fi
}

expected_number_of_arguments=5

if [[ $# != ${expected_number_of_arguments} ]]; then
    echo "Illegal number of parameters ($#): '$*'. Expected ${expected_number_of_arguments}." > /dev/stderr
    echo "See '$(readlink -f "${0}")' for a full documentation." > /dev/stderr
    exit 1
fi

# Unquote the argument.
git_directory="$(echo "${arguments['git-directory']}" | xargs echo)"
if { ! [[ -d ${git_directory} ]]; } || { ! git -C "${git_directory}" rev-parse --git-dir > /dev/null 2>&1; }; then
    echo "The first argument should be a git directory (was '${git_directory}')." > /dev/stderr
    exit 1
fi

# Unquote the argument.
config_directory="$(echo "${arguments['config-directory']}" | xargs echo)"
if ! [[ -d ${config_directory} ]]; then
    echo "The second argument should be a git directory (was '${config_directory}')." > /dev/stderr
    exit 1
fi

# Ensure there's no stray arguments.
rest_arguments_n=${arguments[rest_n]}
if [[ ${rest_arguments_n} != 0 ]]; then
    echo "There are stray arguments ('${rest_arguments_n}' of them)." > /dev/stderr
    exit 1
fi

delete_file="$(readlink -f "${config_directory}/deleted")"
if [[ ! -f ${delete_file} ]]; then
    echo "The second argument must have a \`deleted\` file (i.e. '${delete_file}')." > /dev/stderr
    exit 1
fi

official_file="$(readlink -f "${config_directory}/official")"

if [[ ! -f ${official_file} ]]; then
    echo "Official branch file «${official_file}» not found." > /dev/stderr
    exit 1
fi

validate_other_git_branches_deleted_file "${delete_file}"

# Go to execution directory.
cd "${git_directory}"
git rev-parse --git-dir 2> /dev/null

while IFS=, read -r date_ branch_; do
    "${REFERENCE_DIR}/usr/local/libexec/git_delete_stale_branch" "${date_}" "${branch_}" "${official_file}"
done < "${delete_file}"

# vim: set filetype=sh fileformat=unix nowrap:
# -------------------------------------------------- ✂

# if [[ ${arguments[help]:-false} == 'true' ]]; then
#     git_delete_stale_branches_help
#     exit 0
# fi
#
# if [[ ${arguments[verbose]:-false} == 'true' ]]; then
#     bash ${REFERENCE_DIR}/usr/local/share/git_delete_stale_branches/tests/test_01.sh --test
#     set -x
# fi
#
# if [[ ${arguments[test]:-SENTINEL} != 'SENTINEL' ]]; then
#     bash ${REFERENCE_DIR}/usr/local/share/git_delete_stale_branches/tests/test_01.sh --test
# else
#     echo "Unrecognized entrypoint: \`$@\`." > /dev/stderr
#     exit 1
# fi
#
# echo "Tests are done." > /dev/stderr

# vim: set filetype=sh fileformat=unix nowrap:
