#!/usr/bin/env bash

source "${REFERENCE_DIR}/usr/local/lib/git_delete_stale_branches/git_delete_stale_branches"

TEST_BRANCH_01='_bogus_01_'
TEST_BRANCH_02='_bogus_02-'
TEST_BRANCH_03='normal_name'

function create_bogus_branch() {
    validate_number_of_arguments 0 || return $?
    git checkout main
    git checkout -b "$1"
    echo 'busy work $1' > busy_$(uuidgen | sed -E 's/-//g').txt
    git add --force -- .
    git commit -m "added busy work $1"
    git push --force --set-upstream origin "${1}"
    # git checkout main
}

function get_fresh_clean_clone() {
    {
        validate_number_of_arguments 0 || return $?
        [[ -n ${PROJECT} ]]
        tmpdir=$(mktemp --directory --tmpdir=/tmp/ tmp.$(basename "$0")."${PROJECT}".$(date '+%s').XXXXXX)
        cd "${tmpdir}" || exit 1
        # Start from a ground state: there's only a `main` branch and a `dev` branch.
        git clone --recurse-submodules --jobs 8 -- https://github.com/fmv1992/private_repos_for_testing
        cd ./private_repos_for_testing || exit 1
        for onebranch in ${TEST_BRANCH_01} ${TEST_BRANCH_02} ${TEST_BRANCH_03}; do
            git branch --delete --force ${onebranch} || true
            git push --force --delete origin ${onebranch} || true
        done
        git checkout main
    } >&2
    echo "${tmpdir}/private_repos_for_testing"
}

function clean_up_test_repos() {
    validate_number_of_arguments 0 || return $?
    # Clean up.
    git checkout -- .
    git checkout main
    for onebranch in ${TEST_BRANCH_01} ${TEST_BRANCH_02} ${TEST_BRANCH_03}; do
        git branch --delete --force ${onebranch} || true
        git push --force --delete origin ${onebranch} || true
    done
}

function test_repos_is_clean() {
    validate_number_of_arguments 0 || return $?
    [[ "$(git branch -a)" == "$(echo '
* main
  remotes/origin/HEAD -> origin/main
  remotes/origin/main
' | sed --regexp-extended '/^$/d')" ]]
}

function mktemp_gdsb() {
    validate_number_of_arguments 0 || return $?
    [[ -n ${PROJECT} ]]
    mktemp --directory --tmpdir=/tmp/ tmp.$(basename "$0")."${PROJECT}".$(date '+%s').XXXXXX
}

# vim: set filetype=sh fileformat=unix nowrap:
