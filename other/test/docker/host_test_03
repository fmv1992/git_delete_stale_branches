#! /usr/bin/env bash

# Halt on error.
set -euo pipefail

exit 0

# Old tests. This needs to be renabled.
# ✂ --------------------------------------------------
#! /usr/bin/env bash
#
# shellcheck disable=SC2251

# Halt on error.
set -euo pipefail

# Start from a clean state.
rm -rf /tmp/gnu_make_api/tests/test_git_delete_stale_branches
mkdir -p /tmp/gnu_make_api/tests/test_git_delete_stale_branches

# Setup a git branch with 3 branches: `a`, `ab` and `b`.
cd /tmp/gnu_make_api/tests/test_git_delete_stale_branches
git init .
git commit --allow-empty -m "first (empty commit)"
for branch_ in a ab b; do
    git checkout -b "${branch_}"
    git commit --allow-empty -m "first (empty commit)"
done

# Populate `other/git/branches/deleted`.
ten_hours_ago="$(date -d 'now - 10 hours' '+%s')"
git checkout master
mkdir -p other/git/branches
cat << EOF | sort -u > other/git/branches/deleted
${ten_hours_ago},a
${ten_hours_ago},b
EOF

# Test out some bogus calls.
! "${HOME}/dev/pud/gnu_make_api/bin/git_delete_stale_branches" . bogus
! "${HOME}/dev/pud/gnu_make_api/bin/git_delete_stale_branches" bugus .
# The **directory** should be passed, not the file.
! "${HOME}/dev/pud/gnu_make_api/bin/git_delete_stale_branches" . other/git/branches/deleted

git branch -a | sed -E 's/.* //g' | sort -u > branches_before

"${HOME}/dev/pud/gnu_make_api/bin/git_delete_stale_branches" . other/git/branches/

git branch -a | sed -E 's/.* //g' | sort -u > branches_after

# No deletion takes place since the branches were marked for deletion before
# their creation time.
expected="		a
		ab
		b
		master"
# In `comm` terms: `a` and `b` are unique to `branches_before`. `ab` and
# `master` are common to both files.
[[ $(comm ./branches_before ./branches_after) == "${expected}" ]]

# Now that the saved timestamps refer to older branches, they are properly
# deleted.
in_the_future="$(date -d 'now + 10 hours' '+%s')"
cat << EOF | sort -u > other/git/branches/deleted
${in_the_future},a
${in_the_future},b
EOF

"${HOME}/dev/pud/gnu_make_api/bin/git_delete_stale_branches" . other/git/branches/
git branch -a | sed -E 's/.* //g' | sort -u > branches_after

expected="a
		ab
b
		master"
# In `comm` terms: `a` and `b` are unique to `branches_before`. `ab` and
# `master` are common to both files.
[[ $(comm ./branches_before ./branches_after) == "${expected}" ]]

# vim: set filetype=sh fileformat=unix nowrap:
# -------------------------------------------------- ✂

# vim: set filetype=sh fileformat=unix nowrap:
