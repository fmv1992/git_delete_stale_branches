#! /usr/bin/env bash

# Halt on error.
set -euo pipefail

source ./other/test/docker/test_lib

# Go to execution directory.
cd "$(git rev-parse --show-toplevel)"
curdir=$(pwd)

# Go to a temporary directory.

TEST_BRANCH_01='_bogus_01_'
TEST_BRANCH_02='_bogus_02-'
TEST_BRANCH_03='normal_name'

cd "$(get_fresh_clean_clone)"
# Ensure I'm on `/tmp`.
[[ $(pwd) =~ ^/tmp/ ]]
# Create a bunch of bogus branches.
create_bogus_branch ${TEST_BRANCH_01}
git checkout main
create_bogus_branch ${TEST_BRANCH_02}
# Do not insert `git checkout main` here.
create_bogus_branch ${TEST_BRANCH_03}
# Do not insert `git checkout main` here.

# Create the project structure.
mkdir -p other/git/branches/
touch other/git/branches/{deleted,official}
echo 'main' > other/git/branches/official
echo "$(date '+%s'),${TEST_BRANCH_01}" > other/git/branches/deleted
git add --force -- other/git/branches/
git commit -m "added project structure: deleted and official files"

for onebranch in ${TEST_BRANCH_01} ${TEST_BRANCH_02} ${TEST_BRANCH_03}; do
    git checkout ${onebranch}
    git push --force --set-upstream origin ${onebranch}
done
git checkout ${TEST_BRANCH_03}

# Delete some bogus branches.
git_directory=$(pwd)
[[ ${git_directory} =~ ^/tmp/ ]]
[[ -n "$(find "${git_directory}" -iname 'busy_*.txt')" ]]
# Ensure we have `TEST_BRANCH_01`.
git branch -a | grep -E ${TEST_BRANCH_01}
# Ensure we are taking all branches into account.
[[ "$(git branch -a)" == "$(git branch -a | grep -E 'main|_bogus_01_|_bogus_02-|normal_name')" ]]
# Delete the stale branches.
# ???
bash "${curdir}"/./git_delete_stale_branches/usr/local/bin/git_delete_stale_branches --delete --git-directory "${git_directory}" --config-directory "${git_directory}"/other/git/branches
# Test that the stale branches were deleted.
#
# Ensure only the specified branches were deleted.
[[ $(git branch -a) == $(git branch -a | grep -E 'main|_bogus_02-|normal_name') ]]
! git branch -a | grep -E ${TEST_BRANCH_01}

# Try to delete the `main` branch.
echo "$(date '+%s'),main" >> other/git/branches/deleted
! bash "${curdir}"/./git_delete_stale_branches/usr/local/bin/git_delete_stale_branches --delete --git-directory "${git_directory}" --config-directory "${git_directory}"/other/git/branches
grep --invert-match --fixed-strings -- 'main' other/git/branches/deleted | sponge other/git/branches/deleted

# Test that we cannot delete a branch after a commit time.
echo "$(date --date 'today - 7 days' '+%s'),${TEST_BRANCH_02}" >> other/git/branches/deleted
! bash "${curdir}"/./git_delete_stale_branches/usr/local/bin/git_delete_stale_branches --delete --git-directory "${git_directory}" --config-directory "${git_directory}"/other/git/branches
[[ $(git branch -a) == $(git branch -a | grep -E 'main|_bogus_02-|normal_name') ]]
# But then, if we commit we can delete it.
grep --invert-match --fixed-strings -- ${TEST_BRANCH_02} other/git/branches/deleted | sponge other/git/branches/deleted
touch test_${TEST_BRANCH_02}.txt
git add --force .
git commit -m "added new work"
echo "$(date --date 'today + 7 days' '+%s'),${TEST_BRANCH_02}" >> other/git/branches/deleted
bash "${curdir}"/./git_delete_stale_branches/usr/local/bin/git_delete_stale_branches --delete --git-directory "${git_directory}" --config-directory "${git_directory}"/other/git/branches
[[ "$(git branch -a)" == "$(git branch -a | grep -E 'main|normal_name')" ]]

clean_up_test_repos

test_repos_is_clean

# vim: set filetype=sh fileformat=unix nowrap:
